import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function getCSSVariable(variableName: string): string {
  const root = document.documentElement;
  const hslValue = getComputedStyle(root).getPropertyValue(variableName).trim();
  return `hsl(${hslValue})`; // Convert the HSL value into standard hsl(240, 5.9%, 10%) format

};

// const obj = {   
//     'characters': ['B', 'o', 'r', 'n', ' ', 'a', 'n', 'd', ' ', 'r', 'a', 'i', 's', 'e', 'd', ' ', 'i', 'n', ' ', 't', 'h', 'e', ' ', 'c', 'h', 'a', 'r', 'm', 'i', 'n', 'g', ' ', 's', 'o', 'u', 't', 'h', ',', ' ', 'I', ' ', 'c', 'a', 'n', ' ', 'a', 'd', 'd', ' ', 'a', ' ', 't', 'o', 'u', 'c', 'h', ' ', 'o', 'f', ' ', 's', 'w', 'e', 'e', 't', ' ', 's', 'o', 'u', 't', 'h', 'e', 'r', 'n', ' ', 'h', 'o', 's', 'p', 'i', 't', 'a', 'l', 'i', 't', 'y', ' ', 't', 'o', ' ', 'y', 'o', 'u', 'r', ' ', 'a', 'u', 'd', 'i', 'o', 'b', 'o', 'o', 'k', 's', ' ', 'a', 'n', 'd', ' ', 'p', 'o', 'd', 'c', 'a', 's', 't', 's'], 
//     'character_start_times_seconds': [0.0, 0.186, 0.279, 0.348, 0.406, 0.441, 0.476, 0.499, 0.522, 0.58, 0.65, 0.72, 0.778, 0.824, 0.882, 0.906, 0.952, 0.975, 1.01, 1.045, 1.068, 1.091, 1.115, 1.149, 1.196, 1.254, 1.3, 1.358, 1.416, 1.474, 1.498, 1.521, 1.602, 1.66, 1.811, 1.869, 1.927, 1.974, 2.009, 2.043, 2.067, 2.136, 2.183, 2.218, 2.252, 2.287, 2.322, 2.357, 2.392, 2.426, 2.45, 2.508, 2.531, 2.589, 2.635, 2.682, 2.717, 2.763, 2.786, 2.81, 2.879, 2.937, 3.007, 3.065, 3.123, 3.17, 3.239, 3.286, 3.367, 3.402, 3.437, 3.46, 3.483, 3.529, 3.564, 3.599, 3.634, 3.68, 3.75, 3.82, 3.889, 3.971, 4.087, 4.168, 4.214, 4.272, 4.331, 4.389, 4.412, 4.447, 4.528, 4.551, 4.574, 4.609, 4.644, 4.702, 4.748, 4.807, 4.865, 4.923, 5.016, 5.074, 5.12, 5.155, 5.201, 5.248, 5.283, 5.306, 5.329, 5.352, 5.41, 5.457, 5.573, 5.654, 5.735, 5.886, 5.944, 6.06], 
//     'character_end_times_seconds':   [0.186, 0.279, 0.348, 0.406, 0.441, 0.476, 0.499, 0.522, 0.58, 0.65, 0.72, 0.778, 0.824, 0 , 0.906, 0.952, 0.975, 1.01, 1.045, 1.068, 1.091, 1.115, 1.149, 1.196, 1.254, 1.3, 1.358, 1.416, 1.474, 1.498, 1.521, 1.602, 1.66, 1.811, 1.869, 1.927, 1.974, 2.009, 2.043, 2.067, 2.136, 2.183, 2.218, 2.252, 2.287, 2.322, 2.357, 2.392, 2.426, 2.45, 2.508, 2.531, 2.589, 2.635, 2.682, 2.717, 2.763, 2.786, 2.81, 2.879, 2.937, 3.007, 3.065, 3.123, 3.17, 3.239, 3.286, 3.367, 3.402, 3.437, 3.46, 3.483, 3.529, 3.564, 3.599, 3.634, 3.68, 3.75, 3.82, 3.889, 3.971, 4.087, 4.168, 4.214, 4.272, 4.331, 4.389, 4.412, 4.447, 4.528, 4.551, 4.574, 4.609, 4.644, 4.702, 4.748, 4.807, 4.865, 4.923, 5.016, 5.074, 5.12, 5.155, 5.201, 5.248, 5.283, 5.306, 5.329, 5.352, 5.41, 5.457, 5.573, 5.654, 5.735, 5.886, 5.944, 6.06, 6.548]
// }

export const soudnPlaybackTextObject =  {
  characters: [
    "W",
    "h",
    "y",
    " ",
    "D",
    "r",
    "i",
    "n",
    "k",
    "i",
    "n",
    "g",
    " ",
    "W",
    "a",
    "t",
    "e",
    "r",
    " ",
    "i",
    "s",
    " ",
    "E",
    "s",
    "s",
    "e",
    "n",
    "t",
    "i",
    "a",
    "l",
    " ",
    " ",
    "D",
    "i",
    "d",
    " ",
    "y",
    "o",
    "u",
    " ",
    "k",
    "n",
    "o",
    "w",
    " ",
    "t",
    "h",
    "a",
    "t",
    " ",
    "d",
    "r",
    "i",
    "n",
    "k",
    "i",
    "n",
    "g",
    " ",
    "w",
    "a",
    "t",
    "e",
    "r",
    " ",
    "i",
    "s",
    " ",
    "o",
    "n",
    "e",
    " ",
    "o",
    "f",
    " ",
    "t",
    "h",
    "e",
    " ",
    "e",
    "a",
    "s",
    "i",
    "e",
    "s",
    "t",
    " ",
    "w",
    "a",
    "y",
    "s",
    " ",
    "t",
    "o",
    " ",
    "i",
    "m",
    "p",
    "r",
    "o",
    "v",
    "e",
    " ",
    "y",
    "o",
    "u",
    "r",
    " ",
    "h",
    "e",
    "a",
    "l",
    "t",
    "h",
    "?"
  ],
  character_start_times_seconds: [
    0,
    0.302,
    0.383,
    0.476,
    0.557,
    0.592,
    0.639,
    0.673,
    0.72,
    0.778,
    0.824,
    0.848,
    0.871,
    0.929,
    0.964,
    1.057,
    1.115,
    1.161,
    1.196,
    1.277,
    1.335,
    1.37,
    1.451,
    1.498,
    1.544,
    1.591,
    1.66,
    1.707,
    1.765,
    1.823,
    1.881,
    2.032,
    2.635,
    2.635,
    2.717,
    2.786,
    2.821,
    2.868,
    2.891,
    2.914,
    2.937,
    2.984,
    3.019,
    3.053,
    3.077,
    3.111,
    3.158,
    3.181,
    3.216,
    3.251,
    3.274,
    3.32,
    3.355,
    3.402,
    3.437,
    3.483,
    3.541,
    3.587,
    3.611,
    3.634,
    3.68,
    3.715,
    3.796,
    3.855,
    3.901,
    3.924,
    4.005,
    4.052,
    4.087,
    4.145,
    4.18,
    4.214,
    4.261,
    4.296,
    4.319,
    4.354,
    4.389,
    4.412,
    4.435,
    4.458,
    4.54,
    4.621,
    4.679,
    4.748,
    4.818,
    4.876,
    4.911,
    4.946,
    4.992,
    5.027,
    5.074,
    5.132,
    5.178,
    5.213,
    5.236,
    5.271,
    5.341,
    5.387,
    5.433,
    5.48,
    5.526,
    5.584,
    5.631,
    5.666,
    5.7,
    5.724,
    5.747,
    5.782,
    5.817,
    5.875,
    5.898,
    5.956,
    6.002,
    6.06,
    6.095,
    6.211
  ],
  character_end_times_seconds: [
    0.302,
    0.383,
    0.476,
    0.557,
    0.592,
    0.639,
    0.673,
    0.72,
    0.778,
    0.824,
    0.848,
    0.871,
    0.929,
    0.964,
    1.057,
    1.115,
    1.161,
    1.196,
    1.277,
    1.335,
    1.37,
    1.451,
    1.498,
    1.544,
    1.591,
    1.66,
    1.707,
    1.765,
    1.823,
    1.881,
    2.032,
    2.635,
    2.635,
    2.717,
    2.786,
    2.821,
    2.868,
    2.891,
    2.914,
    2.937,
    2.984,
    3.019,
    3.053,
    3.077,
    3.111,
    3.158,
    3.181,
    3.216,
    3.251,
    3.274,
    3.32,
    3.355,
    3.402,
    3.437,
    3.483,
    3.541,
    3.587,
    3.611,
    3.634,
    3.68,
    3.715,
    3.796,
    3.855,
    3.901,
    3.924,
    4.005,
    4.052,
    4.087,
    4.145,
    4.18,
    4.214,
    4.261,
    4.296,
    4.319,
    4.354,
    4.389,
    4.412,
    4.435,
    4.458,
    4.54,
    4.621,
    4.679,
    4.748,
    4.818,
    4.876,
    4.911,
    4.946,
    4.992,
    5.027,
    5.074,
    5.132,
    5.178,
    5.213,
    5.236,
    5.271,
    5.341,
    5.387,
    5.433,
    5.48,
    5.526,
    5.584,
    5.631,
    5.666,
    5.7,
    5.724,
    5.747,
    5.782,
    5.817,
    5.875,
    5.898,
    5.956,
    6.002,
    6.06,
    6.095,
    6.211,
    6.455
  ]
}

export function extractWordsAndTimestamps(obj:CharacterData) : WordTimestamps {
  const characters = obj.characters;
  const timestamps = obj.character_start_times_seconds;

  let words = [];
  let wordTimestamps = [];
  let currentWord = '';

  for (let i = 0; i < characters.length; i++) {
      if (characters[i] !== ' ') {
          currentWord += characters[i]; 
      } else {
          if (currentWord) {
              words.push(currentWord); 
              wordTimestamps.push(timestamps[i - 1]); 
          }
          words.push(' '); 
          wordTimestamps.push(timestamps[i]); 
          currentWord = ''; 
      }
  }
  
  if (currentWord) {
      words.push(currentWord);
      wordTimestamps.push(timestamps[characters.length - 1]);
  }

  return { words, timestamps: wordTimestamps };
}


